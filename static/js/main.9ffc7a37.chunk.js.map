{"version":3,"sources":["MovieDetail.js","MovieCard.js","MovieList.js","serviceWorker.js","index.js"],"names":["MovieDetail","props","state","movieData","axios","get","this","movieID","then","res","data","setState","Title","Released","Director","Writer","Actors","Plot","Poster","imdbRating","Col","md","span","offset","Modal","size","aria-labelledby","centered","Header","closeButton","id","Image","src","rounded","Body","Footer","Button","onClick","onHide","Component","MovieCard","detailShow","console","log","isShow","Genre","Card","className","style","cursor","width","height","Img","alt","filter","ImgOverlay","Text","substr","split","map","g","key","e","stopPropagation","show","MovieList","search","event","preventDefault","searchTerm","Search","movies","movie","imdbID","handleChange","target","value","searchTerrm","onSubmit","placeholder","onChange","type","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ffc7a37.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Modal, Button, Image, Col } from 'react-bootstrap';\r\n\r\n\r\nclass MovieDetail extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movieData: {}\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(\r\n      `https://www.omdbapi.com/?apikey=e3a5d84f&i=${\r\n      this.props.movieID\r\n      }&plot=full`\r\n    )\r\n      .then(res => res.data)\r\n      .then(res => {\r\n        this.setState({ movieData: res });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      Title,\r\n      Released,\r\n      Director,\r\n      Writer,\r\n      Actors,\r\n      Plot,\r\n      Poster,\r\n      imdbRating\r\n    } = this.state.movieData;\r\n\r\n    return (\r\n      <Col md={{ span: 6, offset: 3 }}>\r\n        <Modal\r\n          {...this.props}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              <Col>\r\n                <Image src={Poster} rounded />\r\n              </Col>\r\n              <h2><center>{Title}</center></h2>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <span>\r\n              <h4>{`Released on: ${Released}`}</h4>\r\n              <h4>{`IMDB Rating: ${imdbRating}`}</h4>\r\n            </span>\r\n            <h5><u>Director:</u> {Director}</h5>\r\n            <h5><u>Writers:</u> {Writer}</h5>\r\n            <h5><u>Cast & Crews:</u> {Actors}</h5>\r\n            <h5><u>Plot:</u></h5>\r\n            <p>{Plot}</p>\r\n\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button onClick={this.props.onHide}>Close</Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </Col>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MovieDetail;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Card } from \"react-bootstrap\";\r\nimport MovieDetail from './MovieDetail';\r\n\r\nclass MovieCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movieData: {},\r\n      detailShow: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(\r\n      `https://www.omdbapi.com/?apikey=e3a5d84f&i=${\r\n      this.props.movieID\r\n      }&plot=short`\r\n    )\r\n      .then(res => {\r\n        console.log(res.data);\r\n        return res.data;})\r\n      .then(res => {\r\n        this.setState({ movieData: res });\r\n      });\r\n  }\r\n\r\n  setDetailShow(isShow) {\r\n    this.setState({\r\n      detailShow: isShow\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      Title,\r\n      Released,\r\n      Genre,\r\n      Plot,\r\n      Poster,\r\n      imdbRating\r\n    } = this.state.movieData;\r\n\r\n    if (!Poster || Poster === 'N/A') {\r\n      return null;\r\n    }\r\n\r\n    let cursorStyle = {\r\n      cursor: 'pointer',\r\n      width: '302px',\r\n      height: '446px'\r\n    }\r\n\r\n    return (\r\n      <Card className=\"bg-dark text-danger\"\r\n        onClick={() => this.setState({\r\n          detailShow: true\r\n        })}\r\n        style={cursorStyle}>\r\n        <Card.Img src={Poster} alt=\"Card image\" style={{\r\n          filter: 'blur(3px)',\r\n          width: '302px',\r\n          height: '446px'\r\n        }} />\r\n        <Card.ImgOverlay>\r\n          <Card.Title><center>{Title}</center></Card.Title>\r\n          <Card.Text><u>Released Date:</u> {Released}</Card.Text>\r\n          <Card.Text><u>Rating:</u> {imdbRating} / 10</Card.Text>\r\n          <Card.Text>\r\n            {Plot && Plot.substr(0, 100)}...\r\n            </Card.Text>\r\n          {Genre &&\r\n            Genre.split(', ').map(g => (\r\n              <Card.Text key={g}><u>{`${g}`}</u></Card.Text>\r\n            ))}\r\n        </Card.ImgOverlay>\r\n        <Card.Text onClick={e => e.stopPropagation()}>\r\n          <MovieDetail\r\n            show={this.state.detailShow}\r\n            onHide={() => this.setState({\r\n              detailShow: false\r\n            },\r\n              () => this.state.detailShow\r\n            )}\r\n            movieID={this.props.movieID}\r\n          />\r\n        </Card.Text>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieCard;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport MovieCard from './MovieCard';\r\n\r\nclass MovieList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movies: ['tt2294629'],\r\n      searchTerrm: ''\r\n    };\r\n  }\r\n\r\n  search = event => {\r\n    event.preventDefault();\r\n    axios\r\n      .get(\r\n        `https://www.omdbapi.com/?apikey=e3a5d84f&s=${\r\n        this.state.searchTerm\r\n        }&plot=short`\r\n      )\r\n      .then(res => res.data)\r\n      .then(res => {\r\n        if (!res.Search) {\r\n          this.setState({ movies: [] });\r\n          return;\r\n        }\r\n\r\n        const movies = res.Search.map(movie => movie.imdbID);\r\n        this.setState({\r\n          movies\r\n        });\r\n      });\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      searchTerm: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { movies } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.search}>\r\n          <input\r\n            placeholder=\"Search for a movie\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <button type=\"submit\">\r\n            Search\r\n          </button>\r\n        </form>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        {movies.length > 0 ? (\r\n          movies.map(movie => (\r\n            <>\r\n              <MovieCard movieID={movie} key={movie} />\r\n              <br />\r\n              <br />\r\n            </>\r\n          ))\r\n        ) : (\r\n            <p>\r\n              No movie found. Please search again using appropriate name.\r\n          </p>\r\n          )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieList;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MovieList from './MovieList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MovieList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}